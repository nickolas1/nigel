#!/usr/local/bin/python

import numpy as np
import argparse
import h5py
import matplotlib.pyplot as plt


def read_hdf5(h5file):
    """Read in an hdf5 snapshot and return numpy arrays of the data
    
       Keyword arguments:
       h5file -- the hdf5 snapshot file generated by n6tohdf5.py
    """
    # open up the HDF5 file
    f = h5py.File(h5file, 'r')
    # read in the datasets and header
   # print 'lendata = ',len[f['Stars']]
    pos = f['Stars/Positions']
    vel = f['Stars/Velocities']
    masses = f['Stars/Masses']
    names = f['Stars/Names'] 
    header = f['Header']
    try:
        lum = f['Stars/Luminosity']
    except KeyError: 
        lum = False
    try:
        teff = f['Stars/Teff']
    except KeyError: 
        teff = False
      
    # send them all back 
    return(pos, vel, masses, names, header, lum, teff, f)  



def main():
    """analyse an hdf5 snapshot of an nbody6 simulation by reading it in and plotting
       a couple of really simple plots.
    
       Keyword arguments:
       hdf5file -- the hdf5 snapshot file generated by n6tohdf5.py
    """
    ##get the filename from the command line...
    parser = argparse.ArgumentParser(description = 'read in and analyse a hdf5 snapshot')
    parser.add_argument('hdf5file', 
        help = 'the hdf5 file to analyse')
    args = parser.parse_args()
    filename = args.n6file
        
    ## ...or else hardwire in a snapshot or series of snapshots    
    #filename = dir+'n6snap.'+str(i).zfill(4)+'.hdf5'
    
    print 'reading snapshot ',filename
    
    # read in the data!
    result = read_hdf5(filename)   
    pos = np.array(result[0])
    vel = np.array(result[1])
    masses = np.array(result[2])
    header = result[4]
    if result[5] != False:
        lum = 10**np.array(result[5])
    else:
        lum = np.zeros(len(pos))
    if result[6] != False:
        teff = 10**np.array(result[6])
    else:
        teff = np.zeros(len(pos))
    
    # get some information from the header. 
    # number of stars
    nstars = header.attrs['Nstars']
    
    # time in Nbody, Myr, Tcross
    time = header.attrs['Time']
    timemyr = header.attrs['TimeMyr']
    
    # close the hdf5 file after we have everything we want
    result[7].close() 
            
    print 'time = ',time,'nbody units    (',timemyr,'Myr).',nstars,'stars present'
    
    fig = plt.figure(figsize=(10,5))
    ax = fig.add_subplot(1, 2, 1)
    ax.plot(pos[:,0],pos[:,2], 'ro')
    ax.set_aspect(1.0)     
    
    
    ax = fig.add_subplot(1, 2, 2)
    ax.scatter(lum, teff)
    ax.set_xlim(ax.get_xlim()[::-1])
    plt.show()
        

        
if __name__ == '__main__':
    main()        